import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        maven {
            url 'https://repo.spring.io/libs-snapshot'
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RC1")
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'groovy'
    id 'nebula.project' version '3.1.0'
    id 'nebula.info' version '3.1.0'
    id 'maven'
    id 'maven-publish'
    id 'com.bmuschko.docker-remote-api' version '3.0.0'
}

repositories {
    maven { url "http://mavenproxy.finntech.no/finntech-release/" }
    maven { url "http://mavenproxy.finntech.no/finntech-snapshot/" }
    jcenter()
    maven {
        url 'https://repo.spring.io/libs-snapshot'
    }
}

apply plugin: 'spring-boot'


sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    compile.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    compile.exclude group: "org.slf4j", module: "slf4j-log4j12"
}

dependencies {
    compile project(":firetruck-domain")
    compile "org.springframework.boot:spring-boot-starter-data-rest"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-log4j2"
    compile "org.springframework.boot:spring-boot-devtools"
    compile "org.springframework.boot:spring-boot-starter-data-elasticsearch"
    compile "com.zaxxer:HikariCP:2.4.6"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.8.0"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.0"
    compile "org.postgresql:postgresql:9.4.1208"
    compile "org.codehaus.groovy:groovy:2.4.7"
    testCompile "junit:junit:4.12"
    testCompile "org.assertj:assertj-core:3.4.1"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "com.h2database:h2:1.4.192"

}

bootRun {
    systemProperties = System.properties
}

task stage {
    dependsOn build
}

/*** Docker + Fiaas ***/
docker {
    if (System.env.DOCKER_HOST) {
        url = "$System.env.DOCKER_HOST".replace("tcp", "https")
        if (System.env.DOCKER_CERT_PATH) {
            certPath = new File(System.env.DOCKER_CERT_PATH)
        }
    } else {
        url = 'unix:///var/run/docker.sock'
    }
}

def image_tag = "finntech/firetruck:${getDate()}"

task bakeImage(type: DockerBuildImage) {
    description 'Build Docker image'
    dependsOn bootRepackage
    inputs.source 'Dockerfile'
    inputs.files bootRepackage.outputs
    inputDir projectDir
    tag image_tag
}

task publishImage(type: Exec) {
    description "Publish docker image to docker registry"
    group 'publishing'
    dependsOn bakeImage
    executable = 'docker'
    args = ['push', image_tag]
    doLast {
        logger.lifecycle("Pushed image ${image_tag}")
    }
}
publish.dependsOn(publishImage)
publish.dependsOn(bootRepackage)

publishing {
    publications {
        fiaas(MavenPublication) {
            artifact('fiaas.yml') {
                classifier 'fiaas'
            }
            groupId = 'no.finntech.firetruck'
            artifactId = 'firetruck-web'
            version = "$project.version"
        }
        firetruck(MavenPublication) {
            groupId = 'no.finntech.firetruck'
            artifactId "$project.name"
            version "$project.version"
            from components.java

            artifact("$buildDir/libs/$project.name-$version-shaded.jar") {
                classifier = "shaded"
            }
        }
    }
    repositories {
        maven {
            url = "http://mavenproxy.finntech.no/finntech-internal-snapshot"
        }
    }
}

def getDate() {
    new Date().format("yyyyMMddHHmmss")
}

bootRepackage {
    classifier = "shaded"
    withJarTask = "jar"
}

springBoot {
    backupSource = false
}

jar {
    from('../frontend/dist') {
        into 'static'
    }
}

jar.dependsOn(":firetruck-frontend:assemble")
